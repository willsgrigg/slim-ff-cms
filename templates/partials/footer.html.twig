{% if config.edit %}
    <script>
        var App = App || {};
        App.Editable = (function(){
            'use strict';

            var thisPage = '{{ config.pageTitle }}';

            function init() {

                initEditableOverlay();

                initEditableImageField();

                bindUIActions();

            }

            function bindUIActions() {

                bindAddPageEvents();

                bindEditableTextFieldEvents();

                bindEditableImageFieldEvents();

            }

            function initEditableOverlay()
            {
                var openingHTML = '<div data-editable-main-overlay>',
                    closingHTML = '</div>';

                var addPageHTML = '<button data-editable-add-page>Add page</button>' +
                        '<div data-editable-add-page-overlay>' +
                            '<form data-editable-add-page-form>' +
                                '<input type="text" name="page-name" placeholder="Page name" />' +
                                '<button type="submit">Submit</button>' +
                            '</form>' +
                        '</div>';

                var pageListHTML = '<div data-editable-page-list></div>';

                $('body').prepend(
                    openingHTML +
                        addPageHTML +
                        pageListHTML +
                    closingHTML
                );

                getPageList(thisPage, function(data){
                    var pages = data,
                        html = '';

                    for(var i = 0; i < pages.length; i++)
                    {
                        html += '<a href="/edit/' + pages[i] + '">' + pages[i] + '</a><br>';
                    }

                    $('[data-editable-page-list]').append(html);
                });
            }

            function bindAddPageEvents()
            {
                $('[data-editable-add-page]').on('click', function(){
                    $('[data-editable-add-page-overlay]').show();
                });

                $('[data-editable-add-page-form]').on('submit', function(e){
                    e.preventDefault();

                    var $pageName = $(this).find('input[name="page-name"]'),
                        pageName = $pageName.val();

                    createPage(pageName, function(){
                        window.location.replace('/edit/' + convertToSlug(pageName));
                    });
                });
            }

            function getPageList(exclude, callback)
            {
                $.ajax({
                    url: '/pages',
                    data: {
                        exclude: exclude
                    },
                    type: 'GET',
                    error: function(error) {
                        console.log(error);
                    },
                    success: callback
                });
            }

            function createPage(value, callback)
            {
                $.ajax({
                    url: '/page/create',
                    data: {
                        value: value
                    },
                    type: 'POST',
                    error: function(error) {
                        console.log(error);
                    },
                    success: callback
                });
            }

            function bindEditableTextFieldEvents()
            {
                $('[contenteditable][data-editable-text-field]').each(function(){
                    $(this).on('blur', function(){
                        var field = $(this).attr('data-editable-text-field'),
                            value = $(this).text();

                        updateTextField(field, value);
                    });
                });
            }

            function initEditableImageField()
            {
                $('[data-editable-image-field]').each(function(){
                    var field = $(this).attr('data-editable-image-field');

                    $(this).wrap('<div data-editable-image-wrapper></div>');

                    $(this).before(
                        '<form data-editable-image-upload-form="' + field + '">' +
                        '<input type="file" name="image" />' +
                        '<button type="submit" data-editable-image-upload-button>Upload</button>' +
                        '</form>'
                    );
                });
            }

            function bindEditableImageFieldEvents()
            {
                $('[data-editable-image-upload-form]').each(function(){
                    $(this).on('submit', function(e){
                        e.preventDefault();

                        var field = $(this).attr('data-editable-image-upload-form'),
                            $file = $(this).find('input[type="file"]'),
                            file = $file[0].files[0];

                        updateImageField(field, file);
                    });
                });
            }

            function updateTextField(field, value)
            {
                var data = {};

                addValueToObj(data, field, value);

                $.ajax({
                    url: '/page/update/{{ config.pageTitle }}',
                    data: data,
                    type: 'POST',
                    error: function(error) {
                        console.log(error);
                    }
                });
            }

            function updateImageField(field, value)
            {
                var formData = new FormData(),
                    xhr = new XMLHttpRequest();

                formData.append(field, value);

                xhr.open('POST', '/page/update/{{ config.pageTitle }}', true);

                xhr.send(formData);

                xhr.onload = function () {
                    if (xhr.status === 200) {
                        console.log('succcess');
                    } else {
                        console.log('error');
                    }
                };
            }

            function addValueToObj(obj, prop, value)
            {
                var path = prop.split(".");

                for (var i = 0, tmp = obj; i < path.length - 1; i++) {
                    tmp = tmp[path[i]] = {};
                }
                tmp[path[i]] = value;
            }

            function convertToSlug(Text)
            {
                return Text
                    .toLowerCase()
                    .replace(/ /g,'-')
                    .replace(/[^\w-]+/g,'');
            }

            return {
                init: init
            };
        })();
        App.Editable.init();
    </script>
{% endif %}